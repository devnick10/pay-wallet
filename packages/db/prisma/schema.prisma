generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance?
  sentTransfers     P2PTransfer[]       @relation("FromUserRelation")
  receivedTransfers P2PTransfer[]       @relation("ToUserRelation")
  payouts           Payout[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Merchant {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String?
  number            String?
  auth_type         AuthType
  Balance           Balance?
  receivedTransfers P2PTransfer[]       @relation("ToMerchantRelation")
  OnRampTransaction OnRampTransaction[]
  payouts           Payout[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model P2PTransfer {
  id             Int       @id @default(autoincrement())
  amount         Int
  timestamp      DateTime  @default(now())
  fromUserId     Int
  fromUser       User      @relation("FromUserRelation", fields: [fromUserId], references: [id])
  toUserId       Int?
  toUser         User?     @relation("ToUserRelation", fields: [toUserId], references: [id])
  toMerchantId   Int?
  toMerchant     Merchant? @relation("ToMerchantRelation", fields: [toMerchantId], references: [id])
}

model OnRampTransaction {
  id         Int          @id @default(autoincrement())
  status     OnRampStatus
  token      String       @unique
  provider   String
  amount     Int
  startTime  DateTime     @default(now())
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  merchantId Int?
  merchant   Merchant?    @relation(fields: [merchantId], references: [id])
}

model Payout {
  id         Int          @id @default(autoincrement())
  status     OnRampStatus
  token      String       @unique
  provider   String
  amount     Int
  startTime  DateTime     @default(now())
  userId     Int?
  user       User?         @relation(fields: [userId], references: [id])
  merchantId Int?
  merchant   Merchant?    @relation(fields: [merchantId], references: [id])
}

model Balance {
  id         Int      @id @default(autoincrement())
  userId     Int?     @unique
  merchantId Int?     @unique
  amount     Int      @default(0)
  locked     Int      @default(0)
  user       User?    @relation(fields: [userId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}